(ns my.calc
  (:require   [clojure.string :as string]
	      [enfocus.core :as ef]
              [enfocus.effects :as effects]
              [enfocus.events :as events]
              [goog.dom :as gdom])
    (:use-macros [enfocus.macros :only [deftemplate defsnippet defaction]]))

;;************************************************
;; Dev stuff
;;************************************************
(def dev-mode true)

(defn change3 [msg]
  (ef/at "#display" (ef/append msg))
  (ef/at "#display" (ef/focus)) )

(defn clear []
  (ef/at "#display" (ef/content ""))
  (ef/at "#display" (ef/focus)) )

(defn whoclicked []
   (let [a (this-as window (.event.toElement.id.toString window))]
;        (js/alert a)
        (string/replace-first a "Num" "#Num")))

(defn digit_events []
  (ef/at ".digit" (events/listen :click #(change3 (ef/from (whoclicked) (ef/get-text)) )))
  (ef/at "#display" (ef/focus)) )

(defn clear_events []
  (ef/at ".clear" (events/listen :click #(clear) ))
  (ef/at "#display" (ef/focus)) )

(defn key_event []
  (let [keypressed (this-as window (.event.keyCode.toString window))]
   (js/window String.fromCharCode keypressed)))
;    (case  (this-as window (.event.keyCode.toString window))
;         ("48") "0"
;         ("49") "1"
;         ("50") "2"
;         ("51") "3"
;         ("52") "4"
;         ("53") "5"
;         ("54") "6"
;         ("55") "7"
;         ("56") "8"
;         ("57") "9"
;         ("46") "." ))


(defn setup_events []
  (ef/at ".digit"   (events/listen :click #(change3 (ef/from (whoclicked) (ef/get-text)) )))
  (ef/at ".clear"   (events/listen :click #(clear) ))
;  (ef/at "#display" (events/listen :keypress #(js/alert (this-as window (.event.keyCode.toString window))))) )
  (ef/at "#display" (events/listen :keypress #(js/alert (key_event)))) )

(defn setup []
  (setup_events)
  (ef/at "#display"  (ef/focus) ) )
;  (digit_events)
;  (clear_events))

(set! (.-onload js/window) setup)

